#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import os
import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol
import time
import RegistryProxy
from ttypes import *
from timeutils import *

class Stat:
	def __init__(self, host):
		self.host = host;
		self.failCounter = float(0);
		self.successCounter = float(0);
		self.costAcc = float(0);
	def getHost(self):
		return self.host;

	def success(self):
		self.successCounter = self.successCounter + 1
		return self.successCounter

	def fail(self):
		self.failCounter = self.failCounter + 1
		return self.failCounter

	def successRate(self):
		if self.successCounter + self.failCounter == 0:
			return 1
		return self.successCounter / (self.successCounter + self.failCounter);
	def cost(self, val):
	    self.costAcc = self.costAcc + val
	def avg(self):
	    total = self.successCounter + self.failCounter
	    if total == 0:
		return 0
	    return self.costAcc * 1000 / total

	def toString(self):
		#return "host	{}	total	{}	success	{}".format(self.host, self.successCounter + self.failCounter, self.successRate())
		#return "host	%s	total	%d	success	%f	fail	%f" % (self.host, self.successCounter + self.failCounter, self.successRate(), float(1)-self.successRate())
		return "host	%s	total	%d	success	%f	avg %f" % (self.host, self.successCounter + self.failCounter, self.successRate(), self.avg())
	def printt(self):
		print self.toString();


servers = [
"g1-mob-app-01",
"g1-mob-app-02",
"g1-mob-app-03",
"g1-mob-app-04",
"g1-mob-app-05",
"g1-mob-app-06",
"g1-mob-app-07",
"g1-mob-app-08",
"g1-mob-app-09",
"g1-mob-app-10",
"g1-mob-app-11",
"g1-mob-app-12",
"g1-mob-app-13",
"yz-mob-app-01",
"yz-mob-app-02",
"yz-mob-app-04",
"yz-mob-app-06",
"yz-mob-app-07",
"yz-mob-app-08",
"yz-mob-app-09",
"yz-mob-app-10",
"yz-mob-app-11",
"yz-mob-app-12",
"yz-mob-app-13",
"g1-mob-wap-01",
"g1-mob-wap-02",
"g1-mob-wap-03",
"g1-mob-wap-04",
"g1-mob-wap-05",
"yz-mob-wap-01",
"yz-mob-wap-02",
"yz-mob-wap-03",
"yz-mob-wap-04",
"yz-mob-wap-05",
"yz-mob-wap-07",
"yz-mob-wap-08",
"yz-mob-wap-09",
"yz-mob-wap-10",
"yz-mob-wap-11",
"yz-mob-wap-12",
"yz-mob-wap-13",
"yz-mob-wap-14",
"yz-mob-wap-15",
"yz-mob-wap-16",
]

stats = {host:Stat(host) for host in servers  }

logFileName = "burn.log." + timestamp_fromunixtime2()
logMaxSize = 100 * 1024 * 1024;
flog = open(logFileName, "a+")

#print timestamp_fromunixtime2()

#print servers
#print len(stats)
#print "reparation is over. ready to burn ......"
#print os.path.getsize("rrsend.py")
#exit(0)


port = 9009
http = False
framed = True
pp = pprint.PrettyPrinter(indent = 1)
while(True):
	for host in servers:
		stat = stats[host]

		if http:
			transport = THttpClient.THttpClient(host, port, uri)
		else:
			socket = TSocket.TSocket(host, port)
		if framed:
			transport = TTransport.TFramedTransport(socket)
		else:
			transport = TTransport.TBufferedTransport(socket)
		protocol = TBinaryProtocol.TBinaryProtocol(transport)
		client = RegistryProxy.Client(protocol)
		start = time.clock()
		try:
			transport.open()
			#pp.pprint(client.get("rta.counter.thrift"))
			client.get("rta.counter.thrift")
			stat.success()
		except TApplicationException, e:
			print "{} TApplicationException {}".format(timestamp_fromunixtime(), e._message)
			stat.fail()
		except TException, e:
			print "{} TException {}".format(timestamp_fromunixtime(), e._message)
			stat.fail()
		except Exception, e:
			print "{} Exception {}: {}".format(timestamp_fromunixtime(), e.errno, e.strerror)
			stat.fail()

		except IOError, e:
			print "{} IOError {}: {}".format(timestamp_fromunixtime(), e.errno, e.strerror)
			stat.fail()
		except:
			print "unknown exception occured."
			stat.fail()
		finally:
			end = time.clock() - start
			stat.cost(end)
			transport.close()
			#print stat.toString()
			try:
				flog.write(stat.toString() + "\n")
			except:
				print "write log error."
	if os.path.getsize(logFileName) > logMaxSize:
		flog.flush()
		flog.close()
		logFileName = "burn.log." + timestamp_fromunixtime2()		
		flog = open(logFileName, "a+")
	time.sleep(10)

flog.flush()
flog.close()
ferror.flush()
ferror.close()


