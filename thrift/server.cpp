// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <iostream>
#include "RegistryProxy.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TNonblockingServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

#include "RegistryProxyHandler.cpp"

using namespace std;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace FinagleRegistryProxy;

int main(int argc, char **argv) {
	int port = 9009;
	shared_ptr<RegistryProxyHandler> handler(new RegistryProxyHandler());
	shared_ptr<TProcessor> processor(new RegistryProxyProcessor(handler));
	shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	shared_ptr<TTransportFactory> transportFactory(new TFramedTransportFactory());
	shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());


//	// using thread pool with maximum 15 threads to handle incoming requests
//	shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(15);
//	shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
//	threadManager->threadFactory(threadFactory);
//	threadManager->start();
	TNonblockingServer server(processor, protocolFactory, port); // , threadManager

	cout << "server started. port=" << port << endl;
	server.serve();
	cout << "server exited. port=" << port << endl;
	return 0;
}

